services:
  api-gateway:
    image: gauss23/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    env_file:
      - ./api-gateway/.env
    networks:
      - microservices-network
    depends_on:
      - product-service
      - user-service
      - payment-service

  product-service:
    image: gauss23/product-service:latest
    container_name: product-service
    ports:
      - "8082:8080"
    environment:
      - DB_HOST=product-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=productdb
      - SERVER_PORT=8080
    env_file:
      - ./product-service/.env
    volumes:
      - ./product-service/migrations:/app/migrations
    networks:
      - microservices-network
    depends_on:
      product-db:
        condition: service_healthy

  user-service:
    image: gauss23/user-service:latest
    container_name: user-service
    ports:
      - "8083:8080"
    environment:
      - DB_HOST=user-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=userdb
      - SERVER_PORT=8080
    env_file:
      - ./user-service/.env
    volumes:
      - ./user-service/migrations:/app/migrations
    networks:
      - microservices-network
    depends_on:
      user-db:
        condition: service_healthy

  payment-service:
    image: gauss23/payment-service:latest
    container_name: payment-service
    ports:
      - "8081:8080"
    environment:
      - DB_HOST=payment-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=paymentdb
      - SERVER_PORT=8080
    env_file:
      - ./payment-service/.env
    volumes:
      - ./payment-service/migrations:/app/migrations
    networks:
      - microservices-network
    depends_on:
      payment-db:
        condition: service_healthy
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    image: gauss23/auth-service:latest
    container_name: auth-service
    ports:
      - "8084:8080"
    environment:
      - SERVER_PORT=8080
      - MEMCACHED_HOST=memcached
      - MEMCACHED_PORT=11211
      - TOKEN_EXPIRATION=24h
      - USER_SERVICE_URL=http://user-service:8080
    networks:
      - microservices-network
    depends_on:
      - memcached
      - user-service
  memcached:
    image: memcached:1.6-alpine
    container_name: memcached
    ports:
      - "11211:11211"
    networks:
      - microservices-network

  # Databases
  product-db:
    image: postgres:15-alpine
    container_name: product-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=productdb
    ports:
      - "5433:5432"
    volumes:
      - product_db_data:/var/lib/postgresql/data
      - ./product-service/migrations:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-db:
    image: postgres:15-alpine
    container_name: user-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=userdb
    ports:
      - "5434:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
      - ./user-service/migrations:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  payment-db:
    image: postgres:15-alpine
    container_name: payment-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=paymentdb
    ports:
      - "5435:5432"
    volumes:
      - payment_db_data:/var/lib/postgresql/data
      - ./payment-service/migrations:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  microservices-network:
    driver: bridge

volumes:
  product_db_data:
  user_db_data:
  payment_db_data:

