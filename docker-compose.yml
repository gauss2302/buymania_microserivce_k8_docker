services:
  api-gateway:
    image: gauss23/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    env_file:
      - ./api-gateway/.env
    networks:
      - microservices-network
    depends_on:
      - product-service

  product-service:
    image: gauss23/product-service:latest
    container_name: product-service
    ports:
      - "8082:8082"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=productdb
      - SERVER_PORT=8082
    env_file:
      - ./product-service/.env
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=productdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    image: gauss23/user-service:latest
    container_name: user-service
    ports:
      - "8083:8080"
    networks:
      - microservices-network

  payment-service:
    image: gauss23/payment-service:latest
    container_name: payment-service
    ports:
      - "8081:8080"
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data:
